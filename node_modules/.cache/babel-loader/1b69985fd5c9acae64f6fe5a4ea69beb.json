{"remainingRequest":"/Users/tommy/code/indeed-export/node_modules/babel-loader/lib/index.js!/Users/tommy/code/indeed-export/node_modules/eslint-loader/index.js??ref--13-0!/Users/tommy/code/indeed-export/src/modules/indeed-scraper/lib/scraper.js","dependencies":[{"path":"/Users/tommy/code/indeed-export/src/modules/indeed-scraper/lib/scraper.js","mtime":1534569332989},{"path":"/Users/tommy/code/indeed-export/node_modules/cache-loader/dist/cjs.js","mtime":1534566234312},{"path":"/Users/tommy/code/indeed-export/node_modules/babel-loader/lib/index.js","mtime":1529635966000},{"path":"/Users/tommy/code/indeed-export/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.array.sort\";\n\nvar request = require('request');\n\nvar cheerio = require('cheerio');\n\nmodule.exports.query = function (queryObject) {\n  var q = new Query(queryObject);\n  return q.getJobs();\n};\n\nfunction Query(qo) {\n  // query variables\n  this.query = qo.query || '';\n  this.location = qo.location || '';\n  this.radius = qo.radius || '25';\n  this.level = qo.level || '';\n  this.maxAge = qo.maxAge || '';\n  this.sort = qo.sort || '';\n  this.jobType = qo.jobType || ''; // internal variables\n\n  this.start = 0;\n  this.limit = Number(qo.limit) || 0;\n}\n\nQuery.prototype.url = function () {\n  var q = 'https://www.indeed.com/jobs';\n  q += '?q=' + this.query;\n  q += '&l=' + this._locationNameForWeb();\n  q += '&radius=' + this.radius;\n  q += '&explvl=' + this.level;\n  q += '&fromage=' + this.maxAge;\n  q += '&sort=' + this.sort;\n  q += '&jt=' + this.jobType;\n  q += '&start=' + this.start;\n  q += '&limit=50';\n  return q;\n};\n\nQuery.prototype._locationNameForWeb = function () {\n  return this.location.replace(' ', '+').replace(',', '%2C');\n};\n/* Gets all the desired jobs for the city */\n\n\nQuery.prototype.getJobs = function () {\n  var _this = this;\n\n  return new Promise(function (resolve, reject) {\n    /* Recursive function that gets jobs until it can't anymore (Or shouldn't) */\n    function getSomeJobs(self, jobs) {\n      request(self.url(), function (error, response, body) {\n        var parsed = parseJobList(body);\n        jobs = jobs.concat(parsed.jobs);\n\n        if (parsed.error !== null) {\n          // Got an error so reject\n          reject(Error);\n        } else if (parsed.continue === true) {\n          // If we reach the limit stop looping\n          if (self.limit != 0 && jobs.length > self.limit) {\n            while (jobs.length != self.limit) {\n              jobs.pop();\n            }\n\n            resolve(jobs);\n          } else {\n            // Continue getting more jobs\n            self.start += 50;\n            getSomeJobs(self, jobs);\n          }\n        } else {\n          // We got all the jobs so stop looping\n          resolve(jobs);\n        }\n      });\n    }\n\n    getSomeJobs(_this, []);\n  });\n};\n/* Parses a page of jobs */\n\n\nfunction parseJobList(body) {\n  var $ = cheerio.load(body);\n  var jobTable = $('#resultsCol');\n  var jobs = jobTable.find('.result');\n  var cont = true; // Filter out ads\n\n  var filtered = jobs.filter(function (i, e) {\n    var job = $(e);\n    var children = job.children();\n    return !children.hasClass('sdn') && !children.hasClass('sjcl');\n  }); // Create objects\n\n  var jobObjects = filtered.map(function (i, e) {\n    var job = $(e);\n    var jobtitle = job.find('.jobtitle').text().trim();\n    var url = 'https://www.indeed.com' + job.find('.jobtitle').children('a').attr('href');\n    var summary = job.find('.summary').text();\n    var company = job.find('.company').text().trim() || null;\n    var location = job.find('.location').text().trim();\n    var postDate = job.find('.date').text().trim();\n    return {\n      title: jobtitle,\n      summary: summary,\n      url: url,\n      company: company,\n      location: location,\n      postDate: postDate\n    };\n  }).get();\n  var pageText = $('#searchCount').text();\n  var toNum = pageText.substring(pageText.indexOf('to ') + 3, pageText.indexOf(' of'));\n  var ofNum = pageText.substr(pageText.indexOf('of ') + 3);\n\n  if (jobTable.children().hasClass('dupetext')) {\n    // We haven't seen all the results but indeed says the rest are duplicates\n    cont = false;\n  } else if (toNum == ofNum) {\n    // We have seen all the results\n    cont = false;\n  }\n\n  return {\n    error: null,\n    continue: cont,\n    jobs: jobObjects\n  };\n}",{"version":3,"sources":["src/modules/indeed-scraper/lib/scraper.js"],"names":["request","require","cheerio","module","exports","query","queryObject","q","Query","getJobs","qo","location","radius","level","maxAge","sort","jobType","start","limit","Number","prototype","url","_locationNameForWeb","replace","Promise","resolve","reject","getSomeJobs","self","jobs","error","response","body","parsed","parseJobList","concat","Error","continue","length","pop","$","load","jobTable","find","cont","filtered","filter","i","e","job","children","hasClass","jobObjects","map","jobtitle","text","trim","attr","summary","company","postDate","title","get","pageText","toNum","substring","indexOf","ofNum","substr"],"mappings":"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","sourceRoot":"/Users/tommy/code/indeed-export","sourcesContent":["const request = require('request');\r\nconst cheerio = require('cheerio');\r\n\r\nmodule.exports.query = function(queryObject){\r\n  const q = new Query(queryObject);\r\n  return q.getJobs();\r\n};\r\n\r\nfunction Query(qo){\r\n  // query variables\r\n  this.query = qo.query || '';\r\n  this.location = qo.location || '';\r\n  this.radius = qo.radius || '25';\r\n  this.level = qo.level || '';\r\n  this.maxAge = qo.maxAge || '';\r\n  this.sort = qo.sort || '';\r\n  this.jobType = qo.jobType || '';\r\n\r\n  // internal variables\r\n  this.start = 0;\r\n  this.limit = Number(qo.limit) || 0;\r\n}\r\n\r\nQuery.prototype.url = function(){\r\n  let q = 'https://www.indeed.com/jobs';\r\n  q += '?q=' + this.query;\r\n  q += '&l=' + this._locationNameForWeb();\r\n  q += '&radius=' + this.radius;\r\n  q += '&explvl=' + this.level;\r\n  q += '&fromage=' + this.maxAge;\r\n  q += '&sort=' + this.sort;\r\n  q += '&jt=' + this.jobType;\r\n  q += '&start=' + this.start;\r\n  q += '&limit=50';\r\n  return q;\r\n}\r\nQuery.prototype._locationNameForWeb = function(){\r\n  return this.location.replace(' ', '+').replace(',', '%2C');\r\n};\r\n\r\n/* Gets all the desired jobs for the city */\r\nQuery.prototype.getJobs = function(){\r\n  return new Promise((resolve, reject) => {\r\n    /* Recursive function that gets jobs until it can't anymore (Or shouldn't) */\r\n    function getSomeJobs(self, jobs) {\r\n      request(self.url(), (error, response, body) => {\r\n        const parsed = parseJobList(body);\r\n        jobs = jobs.concat(parsed.jobs);\r\n        if(parsed.error !== null){\r\n          // Got an error so reject\r\n          reject(Error);\r\n        }else if(parsed.continue === true){\r\n          // If we reach the limit stop looping\r\n          if(self.limit != 0 && jobs.length > self.limit){\r\n            while(jobs.length != self.limit) jobs.pop();\r\n            resolve(jobs);\r\n          }else{\r\n            // Continue getting more jobs\r\n            self.start += 50;\r\n            getSomeJobs(self, jobs);\r\n          }\r\n        }else{\r\n          // We got all the jobs so stop looping\r\n          resolve(jobs);\r\n        }\r\n      });\r\n    }\r\n    getSomeJobs(this, []);\r\n  });\r\n}\r\n\r\n/* Parses a page of jobs */\r\nfunction parseJobList(body){\r\n  const $ = cheerio.load(body);\r\n  const jobTable = $('#resultsCol');\r\n  const jobs = jobTable.find('.result');\r\n  let cont = true;\r\n\r\n  // Filter out ads\r\n  const filtered = jobs.filter((i, e) => {\r\n    const job = $(e);\r\n    const children = job.children();\r\n    return !children.hasClass('sdn') && !children.hasClass('sjcl');\r\n  })\r\n\r\n  // Create objects\r\n  const jobObjects = filtered.map((i, e) => {\r\n    const job = $(e);\r\n\r\n    const jobtitle = job.find('.jobtitle').text().trim();\r\n\r\n    const url = 'https://www.indeed.com' + job.find('.jobtitle').children('a').attr('href');\r\n\r\n    const summary = job.find('.summary').text();\r\n\r\n    const company = job.find('.company').text().trim() || null;\r\n\r\n    const location = job.find('.location').text().trim();\r\n\r\n    const postDate = job.find('.date').text().trim();\r\n\r\n    return {\r\n      title: jobtitle,\r\n      summary: summary,\r\n      url: url,\r\n      company: company,\r\n      location: location,\r\n      postDate: postDate\r\n    };\r\n  }).get();\r\n\r\n  const pageText = $('#searchCount').text();\r\n  const toNum = pageText.substring(pageText.indexOf('to ')+3, pageText.indexOf(' of'));\r\n  const ofNum = pageText.substr(pageText.indexOf('of ')+3);\r\n\r\n  if(jobTable.children().hasClass('dupetext')){\r\n    // We haven't seen all the results but indeed says the rest are duplicates\r\n    cont = false;\r\n  }else if(toNum == ofNum){\r\n    // We have seen all the results\r\n    cont = false;\r\n  }\r\n\r\n  return {\r\n    error: null,\r\n    continue: cont,\r\n    jobs: jobObjects\r\n  };\r\n}"]}]}